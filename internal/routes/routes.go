package routes

import (
    "github.com/gin-gonic/gin"
    "github.com/javice/vet-clinic-api/internal/handlers"

	"github.com/swaggo/files" // swagger embed files
    "github.com/swaggo/gin-swagger" // gin-swagger middleware
	_ "github.com/javice/vet-clinic-api/docs" // docs is generated by Swag CLI, you have to import it.
)

func SetupRouter(handler *handlers.Handler) *gin.Engine {
    router := gin.Default()
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

    // Middleware para CORS
    router.Use(func(c *gin.Context) {
        c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
        c.Writer.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS")
        c.Writer.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")

        if c.Request.Method == "OPTIONS" {
            c.AbortWithStatus(204)
            return
        }

        c.Next()
    })

    // Grupo de rutas para la API
    api := router.Group("/api/v1")
    {
        // Rutas para clientes
        clients := api.Group("/clients")
        {
            clients.GET("", handler.GetClients)
            clients.GET("/:id", handler.GetClient)
            clients.POST("", handler.CreateClient)
            clients.PUT("/:id", handler.UpdateClient)
            clients.PATCH("/:id", handler.UpdateClient)
            clients.DELETE("/:id", handler.DeleteClient)
        }

        // Rutas para mascotas
        pets := api.Group("/pets")
        {
            pets.GET("", handler.GetPets)
            pets.GET("/:id", handler.GetPet)
            pets.POST("", handler.CreatePet)
            pets.PUT("/:id", handler.UpdatePet)
            pets.PATCH("/:id", handler.UpdatePet)
            pets.DELETE("/:id", handler.DeletePet)
        }

		// Rutas para citas
		appointments := api.Group("/appointments")
		{
			appointments.GET("", handler.GetAppointments)
			appointments.GET("/:id", handler.GetAppointment)
			appointments.POST("", handler.CreateAppointment)
			appointments.PUT("/:id", handler.UpdateAppointment)
			appointments.PATCH("/:id", handler.UpdateAppointment)
			appointments.DELETE("/:id", handler.DeleteAppointment)
		}
    }

    return router
}